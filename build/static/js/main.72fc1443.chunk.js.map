{"version":3,"sources":["appData.js","Room.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","process","REACT_APP_API_SOURCE","Title","Typography","Room","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","quietLevel","loading","_this2","console","log","roomStyle","radioStyle","margin","display","height","lineHeight","backgroundColor","react_default","a","createElement","card","style","row","type","align","col","span","es_radio","Group","disabled","buttonStyle","value","String","onChange","e","setState","axios","get","target","then","res","getData","Button","Component","App","data","interval","setInterval","className","src_Room","status","algin","marginTop","minHeight","lib_default","date","Date","now","es_button","shape","icon","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72fc1443.chunk.js","sourcesContent":["let baseUrl = 'http://localhost:5000/app/status-app/api'\nif (process.env.REACT_APP_API_SOURCE !== 'dev') {\n  baseUrl = 'https://creat-ive.net/app/status-app/api'\n}\n\nexport default baseUrl","import React, { Component } from \"react\";\nimport { Col, Row } from 'antd';\nimport { Radio } from 'antd';\nimport { Typography } from 'antd'\nimport { Card } from 'antd'\nimport axios from \"axios\";\nimport baseUrl from './appData'\n\nconst { Title } = Typography;\n\n\nclass Room extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: null,\n      quietLevel: null,\n      loading: false\n    };\n  }\n\n\n  render() {\n    console.log(\"1234\");\n    console.log(process.env);\n    const radioStyle = {\n      margin: \"15px\",\n      display: 'block',\n      height: '30px',\n      lineHeight: '30px',\n    };\n    var roomStyle\n    const sleepStyle = {\n      backgroundColor: \"rgb(46, 64, 89)\",\n    }\n    const normalStyle = {}\n    console.log(this.props.name);\n    console.log(this.props.quietLevel);\n\n    if (this.props.quietLevel === 4) {\n      roomStyle = sleepStyle\n    } else {\n      roomStyle = normalStyle\n    }\n\n    return (\n      <div>\n        <Card loading={this.props.loading} style={roomStyle}>\n          <Row type=\"flex\" align=\"middle\">\n            <Col span={12}>\n              <Title>{this.props.name}</Title>\n            </Col>\n            <Col span={12}>\n              <Radio.Group disabled={this.state.loading} buttonStyle=\"solid\" value={String(this.props.quietLevel)}\n                onChange={(e) => {\n                  this.setState({ loading: true });\n                  axios.get(baseUrl + '/update?name='\n                    + this.props.name\n                    + '&status='\n                    + e.target.value)\n                    .then((res) => { this.props.getData() }).then(this.setState({ loading: false }));\n                }}\n              >\n                <div>\n                  <Radio.Button value=\"1\" style={radioStyle}>Away</Radio.Button>\n                </div>\n                <div>\n                  <Radio.Button value=\"2\" style={radioStyle}>Working</Radio.Button>\n                </div>\n                <div>\n                  <Radio.Button value=\"3\" style={radioStyle}>Chilling</Radio.Button>\n                </div>\n                <div>\n                  <Radio.Button value=\"4\" style={radioStyle}>Sleeping</Radio.Button>\n                </div>\n              </Radio.Group>\n            </Col>\n          </Row>\n        </Card>\n      </div>\n    )\n  }\n}\n\nexport default Room","import React, { Component } from 'react';\nimport './App.css';\nimport { Button } from 'antd'\nimport { Col, Row } from 'antd';\nimport Room from './Room.js'\nimport axios from 'axios'\nimport TimeAgo from 'react-timeago'\nimport baseUrl from './appData'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null\n    }\n  }\n\n  getData = () => {\n    console.log(\"called\")\n    axios.get(baseUrl + '/init').then(res => {\n      this.setState({ data: res.data })\n    })\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.getData()\n    }, 30000)\n  }\n\n  render() {\n    console.log(\"render\")\n    console.log(this.state)\n    if (this.state.data == null) {\n      this.getData()\n      return (\n        <div className=\"App\">\n          <Room loading={true} />\n          <Room loading={true} />\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"App\">\n          <Room name={this.state.data[0].name} quietLevel={this.state.data[0].status} getData={this.getData} />\n          <Room name={this.state.data[1].name} quietLevel={this.state.data[1].status} getData={this.getData} />\n          <Row type=\"flex\" algin=\"middle\" style={{ marginTop: \"10px\", minHeight: \"50px\" }}>\n            <Col span={12}>\n              Last Updated:\n          <TimeAgo date={Date.now()}></TimeAgo>\n            </Col>\n            <Col span={12}>\n              <Button shape=\"round\" icon=\"reload\" onClick={this.getData}>Refresh</Button>\n            </Col>\n          </Row>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}